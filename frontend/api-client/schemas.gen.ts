// This file is auto-generated by @hey-api/openapi-ts

export const Body_generate_graph_endpoint_api_generate_graph_postSchema = {
    properties: {
        repo_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Repo Url',
            description: 'URL to a downloadable ZIP of the repository.'
        },
        branch: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Branch',
            description: 'Branch for GitHub repo URL.',
            default: 'main'
        },
        zip_file: {
            anyOf: [
                {
                    type: 'string',
                    format: 'binary'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Zip File',
            description: 'A ZIP file of the repository.'
        }
    },
    type: 'object',
    title: 'Body_generate_graph_endpoint_api_generate_graph_post'
} as const;

export const Body_generate_structure_endpoint_api_generate_structure_postSchema = {
    properties: {
        repo_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Repo Url',
            description: 'URL to a downloadable ZIP of the repository.'
        },
        branch: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Branch',
            description: 'Branch for GitHub repo URL.',
            default: 'main'
        },
        zip_file: {
            anyOf: [
                {
                    type: 'string',
                    format: 'binary'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Zip File',
            description: 'A ZIP file of the repository.'
        }
    },
    type: 'object',
    title: 'Body_generate_structure_endpoint_api_generate_structure_post'
} as const;

export const Body_generate_text_endpoint_api_generate_text_postSchema = {
    properties: {
        repo_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Repo Url',
            description: 'URL to a downloadable ZIP of the repository (e.g., GitHub archive link).'
        },
        branch: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Branch',
            description: 'Branch to use if repo_url is a GitHub repository link.',
            default: 'main'
        },
        zip_file: {
            anyOf: [
                {
                    type: 'string',
                    format: 'binary'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Zip File',
            description: 'A ZIP file of the repository.'
        }
    },
    type: 'object',
    title: 'Body_generate_text_endpoint_api_generate_text_post'
} as const;

export const ErrorResponseSchema = {
    properties: {
        detail: {
            type: 'string',
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'ErrorResponse'
} as const;

export const FileDataSchema = {
    properties: {
        path: {
            type: 'string',
            title: 'Path'
        },
        content: {
            type: 'string',
            title: 'Content'
        }
    },
    type: 'object',
    required: ['path', 'content'],
    title: 'FileData'
} as const;

export const GraphEdgeSchema = {
    properties: {
        source: {
            type: 'string',
            title: 'Source'
        },
        target: {
            type: 'string',
            title: 'Target'
        },
        relationship: {
            type: 'string',
            title: 'Relationship'
        }
    },
    type: 'object',
    required: ['source', 'target', 'relationship'],
    title: 'GraphEdge'
} as const;

export const GraphNodeSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        category: {
            type: 'string',
            title: 'Category'
        },
        file: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'File'
        },
        start_line: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Line'
        },
        end_line: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Line'
        },
        code: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code'
        }
    },
    type: 'object',
    required: ['id', 'name', 'category'],
    title: 'GraphNode'
} as const;

export const GraphResponseSchema = {
    properties: {
        html_url: {
            type: 'string',
            title: 'Html Url'
        },
        nodes: {
            items: {
                '$ref': '#/components/schemas/GraphNode'
            },
            type: 'array',
            title: 'Nodes'
        },
        edges: {
            items: {
                '$ref': '#/components/schemas/GraphEdge'
            },
            type: 'array',
            title: 'Edges'
        }
    },
    type: 'object',
    required: ['html_url', 'nodes', 'edges'],
    title: 'GraphResponse'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const StructureResponseSchema = {
    properties: {
        directory_tree: {
            type: 'string',
            title: 'Directory Tree'
        },
        files: {
            items: {
                '$ref': '#/components/schemas/FileData'
            },
            type: 'array',
            title: 'Files'
        }
    },
    type: 'object',
    required: ['directory_tree', 'files'],
    title: 'StructureResponse'
} as const;

export const TextResponseSchema = {
    properties: {
        text_content: {
            type: 'string',
            title: 'Text Content'
        },
        filename_suggestion: {
            type: 'string',
            title: 'Filename Suggestion'
        }
    },
    type: 'object',
    required: ['text_content', 'filename_suggestion'],
    title: 'TextResponse'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;