// This file is auto-generated by @hey-api/openapi-ts

export const ApiKeyResponseSchema = {
  properties: {
    success: {
      type: 'boolean',
      title: 'Success',
    },
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
    error_type: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error Type',
    },
    provider: {
      $ref: '#/components/schemas/ModelProvider',
    },
    key_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Key Name',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
    },
  },
  type: 'object',
  required: ['success', 'provider'],
  title: 'ApiKeyResponse',
  description: 'Response model for API key operations',
} as const;

export const AvailableModelsResponseSchema = {
  properties: {
    providers: {
      additionalProperties: {
        items: {
          type: 'string',
        },
        type: 'array',
      },
      type: 'object',
      title: 'Providers',
    },
    current_limits: {
      additionalProperties: {
        type: 'integer',
      },
      type: 'object',
      title: 'Current Limits',
    },
    user_has_keys: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'User Has Keys',
    },
  },
  type: 'object',
  required: ['providers', 'current_limits', 'user_has_keys'],
  title: 'AvailableModelsResponse',
  description: 'Response model for available models',
} as const;

export const Body_delete_user_api_key_backend_enhancedSchema = {
  properties: {
    token: {
      type: 'string',
      title: 'Token',
      description: 'JWT authentication token',
    },
    provider: {
      type: 'string',
      title: 'Provider',
      description: 'Provider name to delete key for',
    },
    key_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Key Id',
      description: 'Specific key ID to delete',
    },
  },
  type: 'object',
  required: ['token', 'provider'],
  title: 'Body_delete_user_api_key_backend_enhanced',
} as const;

export const Body_generate_graph_route_api_repo_generate_graph_postSchema = {
  properties: {
    repo_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Repo Url',
      description: 'URL to a downloadable ZIP of the repository.',
    },
    branch: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Branch',
      description:
        "Branch for GitHub repo URL. If not specified, uses the repository's default branch.",
    },
    zip_file: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Zip File',
      description: 'A ZIP file of the repository.',
    },
    access_token: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Access Token',
      description: 'Optional GitHub token for accessing private repositories.',
    },
  },
  type: 'object',
  title: 'Body_generate_graph_route_api_repo_generate_graph_post',
} as const;

export const Body_generate_structure_route_api_repo_generate_structure_postSchema = {
  properties: {
    repo_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Repo Url',
      description: 'URL to a downloadable ZIP of the repository.',
    },
    branch: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Branch',
      description:
        "Branch for GitHub repo URL. If not specified, uses the repository's default branch.",
    },
    zip_file: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Zip File',
      description: 'A ZIP file of the repository.',
    },
    access_token: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Access Token',
      description: 'Optional GitHub token for accessing private repositories.',
    },
  },
  type: 'object',
  title: 'Body_generate_structure_route_api_repo_generate_structure_post',
} as const;

export const Body_generate_subgraph_route_api_repo_generate_subgraph_postSchema = {
  properties: {
    repo_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Repo Url',
      description: 'URL to a downloadable ZIP of the repository.',
    },
    branch: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Branch',
      description: 'Branch for GitHub repo URL.',
      default: 'main',
    },
    access_token: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Access Token',
      description: 'Optional GitHub token.',
    },
    center_node_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Center Node Id',
      description: 'Center node id for ego network.',
    },
    depth: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Depth',
      description: 'Traversal depth for ego network.',
      default: 1,
    },
    categories: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Categories',
      description: 'Comma-separated categories filter.',
    },
    directories: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Directories',
      description: 'Comma-separated directory prefixes filter.',
    },
    relationship_types: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Relationship Types',
      description: 'Comma-separated relationship types filter.',
    },
    min_degree: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Min Degree',
      description: 'Minimum degree for nodes.',
    },
    limit: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Limit',
      description: 'Max nodes in subgraph.',
      default: 500,
    },
  },
  type: 'object',
  title: 'Body_generate_subgraph_route_api_repo_generate_subgraph_post',
} as const;

export const Body_generate_text_route_api_repo_generate_text_postSchema = {
  properties: {
    repo_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Repo Url',
      description: 'URL to a downloadable ZIP of the repository (e.g., GitHub archive link).',
    },
    branch: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Branch',
      description:
        "Branch to use if repo_url is a GitHub repository link. If not specified, uses the repository's default branch.",
    },
    zip_file: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Zip File',
      description: 'A ZIP file of the repository.',
    },
    access_token: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Access Token',
      description: 'Optional GitHub token for accessing private repositories.',
    },
  },
  type: 'object',
  title: 'Body_generate_text_route_api_repo_generate_text_post',
} as const;

export const Body_generate_wiki_api_documentation_generate_wiki_postSchema = {
  properties: {
    repository_url: {
      type: 'string',
      title: 'Repository Url',
      description: 'URL of the repository to generate documentation for',
    },
    language: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Language',
      description: 'Language for the documentation',
      default: 'en',
    },
    comprehensive: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Comprehensive',
      description: 'Whether to generate comprehensive documentation',
      default: true,
    },
    provider_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Provider Name',
      description: 'Provider name for the documentation generation (openai, anthropic, gemini)',
      default: 'gemini',
    },
    model_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model Name',
      description: 'Specific model name to use for generation',
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Temperature',
      description: 'Temperature for AI generation (0.0-1.5)',
      default: 0.7,
    },
  },
  type: 'object',
  required: ['repository_url'],
  title: 'Body_generate_wiki_api_documentation_generate_wiki_post',
} as const;

export const Body_get_available_models_backend_enhancedSchema = {
  properties: {
    provider: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Provider',
      description: 'Specific provider to get models for',
    },
  },
  type: 'object',
  title: 'Body_get_available_models_backend_enhanced',
} as const;

export const Body_get_indexed_repositories_api_indexed_repos__postSchema = {
  properties: {
    limit: {
      type: 'integer',
      title: 'Limit',
      description: 'Maximum number of repositories to return',
      default: 50,
    },
    offset: {
      type: 'integer',
      title: 'Offset',
      description: 'Number of repositories to skip',
      default: 0,
    },
  },
  type: 'object',
  title: 'Body_get_indexed_repositories_api_indexed_repos__post',
} as const;

export const Body_get_user_api_keys_backend_enhancedSchema = {
  properties: {
    token: {
      type: 'string',
      title: 'Token',
      description: 'JWT authentication token',
    },
  },
  type: 'object',
  required: ['token'],
  title: 'Body_get_user_api_keys_backend_enhanced',
} as const;

export const Body_get_wiki_status_api_documentation_wiki_status_postSchema = {
  properties: {
    repo_id: {
      type: 'string',
      title: 'Repo Id',
      description: 'ID of the repository to check wiki generation status for',
    },
  },
  type: 'object',
  required: ['repo_id'],
  title: 'Body_get_wiki_status_api_documentation_wiki_status_post',
} as const;

export const Body_is_wiki_generated_api_documentation_is_wiki_generated_postSchema = {
  properties: {
    repo_id: {
      type: 'string',
      title: 'Repo Id',
      description: 'ID of the repository to check wiki generation status for',
    },
  },
  type: 'object',
  required: ['repo_id'],
  title: 'Body_is_wiki_generated_api_documentation_is_wiki_generated_post',
} as const;

export const Body_list_repository_docs_api_documentation_repository_docs_postSchema = {
  properties: {
    repo_id: {
      type: 'string',
      title: 'Repo Id',
      description: 'ID of the repository to list documentation files for',
    },
  },
  type: 'object',
  required: ['repo_id'],
  title: 'Body_list_repository_docs_api_documentation_repository_docs_post',
} as const;

export const Body_list_user_chat_sessions_api_backend_chat_sessions_postSchema = {
  properties: {
    repository_identifier: {
      type: 'string',
      title: 'Repository Identifier',
      description: 'Repository identifier in format owner/repo/branch',
    },
  },
  type: 'object',
  required: ['repository_identifier'],
  title: 'Body_list_user_chat_sessions_api_backend_chat_sessions_post',
} as const;

export const Body_process_chat_message_api_backend_chat_chat_postSchema = {
  properties: {
    message: {
      type: 'string',
      title: 'Message',
      description: "User's message/question",
    },
    repository_id: {
      type: 'string',
      title: 'Repository Id',
      description: 'Repository ID to chat about',
    },
    use_user: {
      type: 'boolean',
      title: 'Use User',
      description: "Whether to use the user's saved API key",
      default: false,
    },
    chat_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Chat Id',
      description: 'Chat session ID (auto-generated if not provided)',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation Id',
      description: 'Conversation thread ID (auto-generated if not provided)',
    },
    provider: {
      type: 'string',
      title: 'Provider',
      description: 'LLM provider (openai, anthropic, gemini, groq)',
      default: 'openai',
    },
    model: {
      type: 'string',
      title: 'Model',
      description: 'Model name',
      default: 'gpt-3.5-turbo',
    },
    temperature: {
      type: 'number',
      maximum: 2,
      minimum: 0,
      title: 'Temperature',
      description: 'Response randomness (0.0-2.0)',
      default: 0.7,
    },
    max_tokens: {
      anyOf: [
        {
          type: 'integer',
          maximum: 1000000,
          minimum: 1,
        },
        {
          type: 'null',
        },
      ],
      title: 'Max Tokens',
      description: 'Maximum tokens for context (1-1000000)',
    },
    include_full_context: {
      type: 'boolean',
      title: 'Include Full Context',
      description: 'Include full repository content as context',
      default: false,
    },
    context_search_query: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Context Search Query',
      description: 'Specific search query for context retrieval',
    },
  },
  type: 'object',
  required: ['message', 'repository_id'],
  title: 'Body_process_chat_message_api_backend_chat_chat_post',
} as const;

export const Body_save_api_key_backend_enhancedSchema = {
  properties: {
    token: {
      type: 'string',
      title: 'Token',
      description: 'JWT authentication token',
    },
    provider: {
      type: 'string',
      title: 'Provider',
      description: 'Provider name (openai, anthropic, gemini, groq)',
    },
    api_key: {
      type: 'string',
      title: 'Api Key',
      description: 'API key to save',
    },
    key_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Key Name',
      description: 'Optional friendly name for the key',
    },
    verify_key: {
      type: 'boolean',
      title: 'Verify Key',
      description: 'Whether to verify key before saving',
      default: true,
    },
  },
  type: 'object',
  required: ['token', 'provider', 'api_key'],
  title: 'Body_save_api_key_backend_enhanced',
} as const;

export const Body_save_user_api_key_api_backend_chat_keys_save_postSchema = {
  properties: {
    provider: {
      type: 'string',
      title: 'Provider',
      description: 'Provider name (openai, anthropic, gemini, groq)',
    },
    api_key: {
      type: 'string',
      title: 'Api Key',
      description: 'API key',
    },
    key_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Key Name',
      description: 'Friendly name for the key',
    },
    verify_key: {
      type: 'boolean',
      title: 'Verify Key',
      description: 'Whether to verify the key before saving',
      default: true,
    },
  },
  type: 'object',
  required: ['provider', 'api_key'],
  title: 'Body_save_user_api_key_api_backend_chat_keys_save_post',
} as const;

export const Body_search_context_api_backend_chat_context_search_postSchema = {
  properties: {
    repository_id: {
      type: 'string',
      title: 'Repository Id',
      description: 'Repository ID to search',
    },
    query: {
      type: 'string',
      title: 'Query',
      description: 'Search query',
    },
    max_results: {
      type: 'integer',
      maximum: 20,
      minimum: 1,
      title: 'Max Results',
      description: 'Maximum number of results (1-20)',
      default: 5,
    },
  },
  type: 'object',
  required: ['repository_id', 'query'],
  title: 'Body_search_context_api_backend_chat_context_search_post',
} as const;

export const Body_stream_chat_response_api_backend_chat_chat_stream_postSchema = {
  properties: {
    message: {
      type: 'string',
      title: 'Message',
      description: "User's message/question",
    },
    repository_id: {
      type: 'string',
      title: 'Repository Id',
      description: 'Repository ID to chat about',
    },
    use_user: {
      type: 'boolean',
      title: 'Use User',
      description: "Whether to use the user's saved API key",
      default: false,
    },
    chat_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Chat Id',
      description: 'Chat session ID (auto-generated if not provided)',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation Id',
      description: 'Conversation thread ID (auto-generated if not provided)',
    },
    provider: {
      type: 'string',
      title: 'Provider',
      description: 'LLM provider (openai, anthropic, gemini, groq)',
      default: 'openai',
    },
    model: {
      type: 'string',
      title: 'Model',
      description: 'Model name',
      default: 'gpt-3.5-turbo',
    },
    temperature: {
      type: 'number',
      maximum: 2,
      minimum: 0,
      title: 'Temperature',
      description: 'Response randomness (0.0-2.0)',
      default: 0.7,
    },
    max_tokens: {
      anyOf: [
        {
          type: 'integer',
          maximum: 1000000,
          minimum: 1,
        },
        {
          type: 'null',
        },
      ],
      title: 'Max Tokens',
      description: 'Maximum tokens for context (1-1000000)',
    },
    context_mode: {
      type: 'string',
      title: 'Context Mode',
      description: 'Context mode: full, smart, or agentic',
      default: 'smart',
    },
    repository_branch: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Repository Branch',
      description: 'Repository branch for more precise matching',
    },
  },
  type: 'object',
  required: ['message', 'repository_id'],
  title: 'Body_stream_chat_response_api_backend_chat_chat_stream_post',
} as const;

export const Body_update_chat_settings_api_backend_chat_settings_postSchema = {
  properties: {
    chat_id: {
      type: 'string',
      title: 'Chat Id',
      description: 'Chat session ID to update',
    },
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
      description: 'New chat title',
    },
    default_provider: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Default Provider',
      description: 'Default LLM provider',
    },
    default_model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Default Model',
      description: 'Default model name',
    },
    default_temperature: {
      anyOf: [
        {
          type: 'number',
          maximum: 2,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title: 'Default Temperature',
      description: 'Default temperature (0.0-2.0)',
    },
  },
  type: 'object',
  required: ['chat_id'],
  title: 'Body_update_chat_settings_api_backend_chat_settings_post',
} as const;

export const Body_verify_api_key_backend_enhancedSchema = {
  properties: {
    token: {
      type: 'string',
      title: 'Token',
      description: 'JWT authentication token',
    },
    provider: {
      type: 'string',
      title: 'Provider',
      description: 'Provider name (openai, anthropic, gemini, groq)',
    },
    api_key: {
      type: 'string',
      title: 'Api Key',
      description: 'API key to verify',
    },
  },
  type: 'object',
  required: ['token', 'provider', 'api_key'],
  title: 'Body_verify_api_key_backend_enhanced',
} as const;

export const Body_verify_user_api_key_api_backend_chat_keys_verify_postSchema = {
  properties: {
    provider: {
      type: 'string',
      title: 'Provider',
      description: 'Provider name (openai, anthropic, gemini, groq)',
    },
    api_key: {
      type: 'string',
      title: 'Api Key',
      description: 'API key to verify',
    },
  },
  type: 'object',
  required: ['provider', 'api_key'],
  title: 'Body_verify_user_api_key_api_backend_chat_keys_verify_post',
} as const;

export const ChatResponseSchema = {
  properties: {
    success: {
      type: 'boolean',
      title: 'Success',
    },
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
    error_type: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error Type',
    },
    chat_id: {
      type: 'string',
      title: 'Chat Id',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    ai_response: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Ai Response',
    },
    context_used: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Context Used',
    },
    context_metadata: {
      anyOf: [
        {
          additionalProperties: true,
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Context Metadata',
      description: 'Smart context selection metadata',
    },
    usage: {
      anyOf: [
        {
          $ref: '#/components/schemas/TokenUsage',
        },
        {
          type: 'null',
        },
      ],
    },
    model_used: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model Used',
    },
    provider: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Provider',
    },
    response_time: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Response Time',
      description: 'Response time in seconds',
    },
    daily_usage: {
      anyOf: [
        {
          $ref: '#/components/schemas/DailyUsage',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  required: ['success', 'chat_id', 'conversation_id'],
  title: 'ChatResponse',
  description: 'Response model for non-streaming chat interactions',
} as const;

export const ChatSessionListItemSchema = {
  properties: {
    chat_id: {
      type: 'string',
      title: 'Chat Id',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
  },
  type: 'object',
  required: ['chat_id', 'conversation_id', 'title'],
  title: 'ChatSessionListItem',
  description: 'Basic chat session info for listing',
} as const;

export const ChatSessionListResponseSchema = {
  properties: {
    success: {
      type: 'boolean',
      title: 'Success',
    },
    sessions: {
      items: {
        $ref: '#/components/schemas/ChatSessionListItem',
      },
      type: 'array',
      title: 'Sessions',
    },
  },
  type: 'object',
  required: ['success', 'sessions'],
  title: 'ChatSessionListResponse',
  description: 'Response for listing chat sessions',
} as const;

export const ChatSessionResponseSchema = {
  properties: {
    chat_id: {
      type: 'string',
      title: 'Chat Id',
    },
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
    },
    repository_name: {
      type: 'string',
      title: 'Repository Name',
    },
    repository_id: {
      type: 'string',
      title: 'Repository Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    is_active: {
      type: 'boolean',
      title: 'Is Active',
      default: true,
    },
    default_model_provider: {
      $ref: '#/components/schemas/ModelProvider',
      default: 'openai',
    },
    default_model_name: {
      type: 'string',
      title: 'Default Model Name',
      default: 'gpt-3.5-turbo',
    },
    default_temperature: {
      type: 'number',
      maximum: 2,
      minimum: 0,
      title: 'Default Temperature',
      default: 0.7,
    },
    use_own_key: {
      type: 'boolean',
      title: 'Use Own Key',
      default: false,
    },
    daily_requests_count: {
      type: 'integer',
      title: 'Daily Requests Count',
      default: 0,
    },
    daily_limit: {
      type: 'integer',
      title: 'Daily Limit',
      default: 50,
    },
    recent_conversations: {
      items: {
        $ref: '#/components/schemas/ConversationHistoryResponse',
      },
      type: 'array',
      title: 'Recent Conversations',
      default: [],
    },
  },
  type: 'object',
  required: ['chat_id', 'repository_name', 'repository_id', 'created_at', 'updated_at'],
  title: 'ChatSessionResponse',
  description: 'Response model for chat session information',
} as const;

export const ChatSettingsResponseSchema = {
  properties: {
    success: {
      type: 'boolean',
      title: 'Success',
    },
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
    error_type: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error Type',
    },
    settings: {
      anyOf: [
        {
          additionalProperties: true,
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Settings',
    },
  },
  type: 'object',
  required: ['success'],
  title: 'ChatSettingsResponse',
  description: 'Response model for chat settings',
} as const;

export const ContextSearchResponseSchema = {
  properties: {
    success: {
      type: 'boolean',
      title: 'Success',
    },
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
    error_type: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error Type',
    },
    results: {
      items: {
        $ref: '#/components/schemas/ContextSearchResult',
      },
      type: 'array',
      title: 'Results',
      default: [],
    },
    total_found: {
      type: 'integer',
      title: 'Total Found',
      default: 0,
    },
    query_used: {
      type: 'string',
      title: 'Query Used',
    },
  },
  type: 'object',
  required: ['success', 'query_used'],
  title: 'ContextSearchResponse',
  description: 'Response model for context search',
} as const;

export const ContextSearchResultSchema = {
  properties: {
    line_number: {
      type: 'integer',
      title: 'Line Number',
    },
    content: {
      type: 'string',
      title: 'Content',
    },
    context: {
      type: 'string',
      title: 'Context',
    },
  },
  type: 'object',
  required: ['line_number', 'content', 'context'],
  title: 'ContextSearchResult',
  description: 'Individual search result',
} as const;

export const ConversationHistoryResponseSchema = {
  properties: {
    chat_id: {
      type: 'string',
      title: 'Chat Id',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/MessageResponse',
      },
      type: 'array',
      title: 'Messages',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    total_tokens_used: {
      type: 'integer',
      title: 'Total Tokens Used',
      default: 0,
    },
    model_provider: {
      $ref: '#/components/schemas/ModelProvider',
    },
    model_name: {
      type: 'string',
      title: 'Model Name',
    },
  },
  type: 'object',
  required: [
    'chat_id',
    'conversation_id',
    'messages',
    'created_at',
    'updated_at',
    'model_provider',
    'model_name',
  ],
  title: 'ConversationHistoryResponse',
  description: 'Response model for conversation history',
} as const;

export const DailyUsageSchema = {
  properties: {
    requests_used: {
      type: 'integer',
      title: 'Requests Used',
    },
    requests_limit: {
      type: 'integer',
      title: 'Requests Limit',
    },
    reset_date: {
      type: 'string',
      title: 'Reset Date',
    },
  },
  type: 'object',
  required: ['requests_used', 'requests_limit', 'reset_date'],
  title: 'DailyUsage',
  description: 'Daily usage tracking',
} as const;

export const DocumentationFileSchema = {
  properties: {
    metadata: {
      $ref: '#/components/schemas/FileMetadata',
    },
    content: {
      type: 'string',
      title: 'Content',
    },
    preview: {
      type: 'string',
      title: 'Preview',
    },
    word_count: {
      type: 'integer',
      title: 'Word Count',
    },
    read_time: {
      type: 'integer',
      title: 'Read Time',
    },
  },
  type: 'object',
  required: ['metadata', 'content', 'preview', 'word_count', 'read_time'],
  title: 'DocumentationFile',
} as const;

export const ErrorResponseSchema = {
  properties: {
    detail: {
      type: 'string',
      title: 'Detail',
    },
  },
  type: 'object',
  required: ['detail'],
  title: 'ErrorResponse',
} as const;

export const FileDataSchema = {
  properties: {
    path: {
      type: 'string',
      title: 'Path',
    },
    content: {
      type: 'string',
      title: 'Content',
    },
  },
  type: 'object',
  required: ['path', 'content'],
  title: 'FileData',
} as const;

export const FileMetadataSchema = {
  properties: {
    filename: {
      type: 'string',
      title: 'Filename',
    },
    size: {
      type: 'integer',
      title: 'Size',
    },
    modified: {
      type: 'string',
      title: 'Modified',
    },
    type: {
      type: 'string',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['filename', 'size', 'modified', 'type'],
  title: 'FileMetadata',
} as const;

export const GraphEdgeSchema = {
  properties: {
    source: {
      type: 'string',
      title: 'Source',
    },
    target: {
      type: 'string',
      title: 'Target',
    },
    relationship: {
      type: 'string',
      title: 'Relationship',
    },
  },
  type: 'object',
  required: ['source', 'target', 'relationship'],
  title: 'GraphEdge',
} as const;

export const GraphNodeSchema = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    category: {
      type: 'string',
      title: 'Category',
    },
    file: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'File',
    },
    start_line: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Start Line',
    },
    end_line: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'End Line',
    },
    code: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Code',
    },
  },
  type: 'object',
  required: ['id', 'name', 'category'],
  title: 'GraphNode',
} as const;

export const GraphResponseSchema = {
  properties: {
    html_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Html Url',
    },
    nodes: {
      items: {
        $ref: '#/components/schemas/GraphNode',
      },
      type: 'array',
      title: 'Nodes',
    },
    edges: {
      items: {
        $ref: '#/components/schemas/GraphEdge',
      },
      type: 'array',
      title: 'Edges',
    },
  },
  type: 'object',
  required: ['nodes', 'edges'],
  title: 'GraphResponse',
} as const;

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const;

export const IndexedRepositoriesResponseSchema = {
  properties: {
    repositories: {
      items: {
        $ref: '#/components/schemas/IndexedRepository',
      },
      type: 'array',
      title: 'Repositories',
    },
    total_count: {
      type: 'integer',
      title: 'Total Count',
    },
    user_tier: {
      type: 'string',
      title: 'User Tier',
    },
  },
  type: 'object',
  required: ['repositories', 'total_count', 'user_tier'],
  title: 'IndexedRepositoriesResponse',
} as const;

export const IndexedRepositorySchema = {
  properties: {
    repo_id: {
      type: 'string',
      title: 'Repo Id',
    },
    repo_name: {
      type: 'string',
      title: 'Repo Name',
    },
    branch: {
      type: 'string',
      title: 'Branch',
    },
    source: {
      type: 'string',
      title: 'Source',
    },
    github_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Github Url',
    },
    commit_sha: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Commit Sha',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    file_size_mb: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'File Size Mb',
    },
  },
  type: 'object',
  required: ['repo_id', 'repo_name', 'branch', 'source', 'created_at', 'updated_at'],
  title: 'IndexedRepository',
} as const;

export const IsWikiGeneratedResponseSchema = {
  properties: {
    is_generated: {
      type: 'boolean',
      title: 'Is Generated',
    },
    status: {
      type: 'string',
      title: 'Status',
    },
    message: {
      type: 'string',
      title: 'Message',
      default: 'Wiki documentation generation status checked successfully',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
  },
  type: 'object',
  required: ['is_generated', 'status'],
  title: 'IsWikiGeneratedResponse',
} as const;

export const LoginRequestSchema = {
  properties: {
    access_token: {
      type: 'string',
      title: 'Access Token',
    },
  },
  type: 'object',
  required: ['access_token'],
  title: 'LoginRequest',
} as const;

export const LoginResponseSchema = {
  properties: {
    jwt_token: {
      type: 'string',
      title: 'Jwt Token',
    },
    expires_in: {
      type: 'integer',
      title: 'Expires In',
    },
    user_id: {
      type: 'string',
      title: 'User Id',
    },
    token_type: {
      type: 'string',
      title: 'Token Type',
      default: 'bearer',
    },
    refresh_token: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Refresh Token',
    },
    refresh_expires_in: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Refresh Expires In',
    },
  },
  type: 'object',
  required: ['jwt_token', 'expires_in', 'user_id'],
  title: 'LoginResponse',
} as const;

export const MessageResponseSchema = {
  properties: {
    role: {
      type: 'string',
      enum: ['user', 'assistant', 'system'],
      title: 'Role',
    },
    content: {
      type: 'string',
      title: 'Content',
    },
    timestamp: {
      type: 'string',
      format: 'date-time',
      title: 'Timestamp',
    },
    context_used: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Context Used',
    },
    metadata: {
      anyOf: [
        {
          additionalProperties: true,
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
    },
  },
  type: 'object',
  required: ['role', 'content', 'timestamp'],
  title: 'MessageResponse',
  description: 'Response model for individual messages',
} as const;

export const ModelProviderSchema = {
  type: 'string',
  enum: ['openai', 'anthropic', 'gemini', 'groq'],
  title: 'ModelProvider',
  description: 'Supported LLM providers',
} as const;

export const NavigationDataSchema = {
  properties: {
    sidebar: {
      items: {
        $ref: '#/components/schemas/SidebarItem',
      },
      type: 'array',
      title: 'Sidebar',
    },
    total_pages: {
      type: 'integer',
      title: 'Total Pages',
    },
  },
  type: 'object',
  required: ['sidebar', 'total_pages'],
  title: 'NavigationData',
} as const;

export const RefreshTokenRequestSchema = {
  properties: {
    refresh_token: {
      type: 'string',
      title: 'Refresh Token',
    },
  },
  type: 'object',
  required: ['refresh_token'],
  title: 'RefreshTokenRequest',
} as const;

export const RefreshTokenResponseSchema = {
  properties: {
    access_token: {
      type: 'string',
      title: 'Access Token',
    },
    expires_in: {
      type: 'integer',
      title: 'Expires In',
    },
    token_type: {
      type: 'string',
      title: 'Token Type',
      default: 'bearer',
    },
  },
  type: 'object',
  required: ['access_token', 'expires_in'],
  title: 'RefreshTokenResponse',
} as const;

export const RepositoryAnalysisSchema = {
  properties: {
    domain_type: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Domain Type',
    },
    complexity_score: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Complexity Score',
    },
    languages: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Languages',
    },
    frameworks: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Frameworks',
    },
    total_pages: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Total Pages',
    },
  },
  type: 'object',
  title: 'RepositoryAnalysis',
} as const;

export const RepositoryDocsDataSchema = {
  properties: {
    repository: {
      $ref: '#/components/schemas/RepositoryInfo',
    },
    analysis: {
      $ref: '#/components/schemas/RepositoryAnalysis',
    },
    navigation: {
      $ref: '#/components/schemas/NavigationData',
    },
    folder_structure: {
      title: 'Folder Structure',
    },
    content: {
      additionalProperties: {
        $ref: '#/components/schemas/DocumentationFile',
      },
      type: 'object',
      title: 'Content',
    },
  },
  type: 'object',
  required: ['repository', 'analysis', 'navigation', 'folder_structure', 'content'],
  title: 'RepositoryDocsData',
} as const;

export const RepositoryDocsResponseSchema = {
  properties: {
    success: {
      type: 'boolean',
      title: 'Success',
    },
    data: {
      $ref: '#/components/schemas/RepositoryDocsData',
    },
    message: {
      type: 'string',
      title: 'Message',
    },
  },
  type: 'object',
  required: ['success', 'data', 'message'],
  title: 'RepositoryDocsResponse',
} as const;

export const RepositoryInfoSchema = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    directory: {
      type: 'string',
      title: 'Directory',
    },
  },
  type: 'object',
  required: ['id', 'name', 'directory'],
  title: 'RepositoryInfo',
} as const;

export const SidebarItemSchema = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    filename: {
      type: 'string',
      title: 'Filename',
    },
    emoji: {
      type: 'string',
      title: 'Emoji',
    },
    url: {
      type: 'string',
      title: 'Url',
    },
  },
  type: 'object',
  required: ['title', 'filename', 'emoji', 'url'],
  title: 'SidebarItem',
} as const;

export const StructureResponseSchema = {
  properties: {
    directory_tree: {
      type: 'string',
      title: 'Directory Tree',
    },
    files: {
      items: {
        $ref: '#/components/schemas/FileData',
      },
      type: 'array',
      title: 'Files',
    },
  },
  type: 'object',
  required: ['directory_tree', 'files'],
  title: 'StructureResponse',
} as const;

export const TaskStatusSchema = {
  properties: {
    task_id: {
      type: 'string',
      title: 'Task Id',
    },
    status: {
      type: 'string',
      title: 'Status',
    },
    message: {
      type: 'string',
      title: 'Message',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
    created_at: {
      type: 'number',
      title: 'Created At',
    },
    completed_at: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Completed At',
    },
  },
  type: 'object',
  required: ['task_id', 'status', 'message', 'created_at'],
  title: 'TaskStatus',
} as const;

export const TextResponseSchema = {
  properties: {
    text_content: {
      type: 'string',
      title: 'Text Content',
    },
    filename_suggestion: {
      type: 'string',
      title: 'Filename Suggestion',
    },
    repo_id: {
      type: 'string',
      title: 'Repo Id',
    },
  },
  type: 'object',
  required: ['text_content', 'filename_suggestion', 'repo_id'],
  title: 'TextResponse',
} as const;

export const TokenUsageSchema = {
  properties: {
    prompt_tokens: {
      type: 'integer',
      title: 'Prompt Tokens',
      default: 0,
    },
    completion_tokens: {
      type: 'integer',
      title: 'Completion Tokens',
      default: 0,
    },
    total_tokens: {
      type: 'integer',
      title: 'Total Tokens',
      default: 0,
    },
  },
  type: 'object',
  title: 'TokenUsage',
  description: 'Token usage information',
} as const;

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const;

export const WikiGenerationResponseSchema = {
  properties: {
    status: {
      type: 'string',
      title: 'Status',
    },
    message: {
      type: 'string',
      title: 'Message',
    },
    task_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Task Id',
    },
    result: {
      anyOf: [
        {
          additionalProperties: true,
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Result',
    },
  },
  type: 'object',
  required: ['status', 'message'],
  title: 'WikiGenerationResponse',
} as const;
