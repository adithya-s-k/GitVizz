// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { GenerateTextEndpointApiRepoGenerateTextPostData, GenerateTextEndpointApiRepoGenerateTextPostResponses, GenerateTextEndpointApiRepoGenerateTextPostErrors, GenerateGraphEndpointApiRepoGenerateGraphPostData, GenerateGraphEndpointApiRepoGenerateGraphPostResponses, GenerateGraphEndpointApiRepoGenerateGraphPostErrors, GenerateStructureEndpointApiRepoGenerateStructurePostData, GenerateStructureEndpointApiRepoGenerateStructurePostResponses, GenerateStructureEndpointApiRepoGenerateStructurePostErrors, LoginUserApiBackendAuthLoginPostData, LoginUserApiBackendAuthLoginPostResponses, LoginUserApiBackendAuthLoginPostErrors, ProcessChatMessageApiBackendChatChatPostData, ProcessChatMessageApiBackendChatChatPostResponses, ProcessChatMessageApiBackendChatChatPostErrors, StreamChatResponseApiBackendChatChatStreamPostData, StreamChatResponseApiBackendChatChatStreamPostResponses, StreamChatResponseApiBackendChatChatStreamPostErrors, GetConversationHistoryApiBackendChatConversationsConversationIdPostData, GetConversationHistoryApiBackendChatConversationsConversationIdPostResponses, GetConversationHistoryApiBackendChatConversationsConversationIdPostErrors, ListUserChatSessionsApiBackendChatSessionsPostData, ListUserChatSessionsApiBackendChatSessionsPostResponses, ListUserChatSessionsApiBackendChatSessionsPostErrors, GetChatSessionApiBackendChatSessionsChatIdPostData, GetChatSessionApiBackendChatSessionsChatIdPostResponses, GetChatSessionApiBackendChatSessionsChatIdPostErrors, SaveUserApiKeyApiBackendChatKeysSavePostData, SaveUserApiKeyApiBackendChatKeysSavePostResponses, SaveUserApiKeyApiBackendChatKeysSavePostErrors, GetAvailableModelsApiBackendChatModelsPostData, GetAvailableModelsApiBackendChatModelsPostResponses, GetAvailableModelsApiBackendChatModelsPostErrors, UpdateChatSettingsApiBackendChatSettingsPostData, UpdateChatSettingsApiBackendChatSettingsPostResponses, UpdateChatSettingsApiBackendChatSettingsPostErrors, SearchContextApiBackendChatContextSearchPostData, SearchContextApiBackendChatContextSearchPostResponses, SearchContextApiBackendChatContextSearchPostErrors, GenerateWikiApiDocumentationGenerateWikiPostData, GenerateWikiApiDocumentationGenerateWikiPostResponses, GenerateWikiApiDocumentationGenerateWikiPostErrors, GetWikiStatusApiDocumentationWikiStatusPostData, GetWikiStatusApiDocumentationWikiStatusPostResponses, GetWikiStatusApiDocumentationWikiStatusPostErrors, IsWikiGeneratedApiDocumentationIsWikiGeneratedPostData, IsWikiGeneratedApiDocumentationIsWikiGeneratedPostResponses, IsWikiGeneratedApiDocumentationIsWikiGeneratedPostErrors, ListRepositoryDocsApiDocumentationRepositoryDocsPostData, ListRepositoryDocsApiDocumentationRepositoryDocsPostResponses, ListRepositoryDocsApiDocumentationRepositoryDocsPostErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { getConversationHistoryApiBackendChatConversationsConversationIdPostResponseTransformer, getChatSessionApiBackendChatSessionsChatIdPostResponseTransformer, saveUserApiKeyApiBackendChatKeysSavePostResponseTransformer } from './transformers.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Generates LLM-friendly text from a code repository with smart caching.
 * Generates LLM-friendly text from a code repository or ZIP file.
 */
export const generateTextEndpointApiRepoGenerateTextPost = <ThrowOnError extends boolean = false>(options?: Options<GenerateTextEndpointApiRepoGenerateTextPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenerateTextEndpointApiRepoGenerateTextPostResponses, GenerateTextEndpointApiRepoGenerateTextPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/repo/generate-text',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Generates a dependency graph from a code repository with smart caching.
 * Generates a dependency graph representation from a code repository or ZIP file.
 */
export const generateGraphEndpointApiRepoGenerateGraphPost = <ThrowOnError extends boolean = false>(options?: Options<GenerateGraphEndpointApiRepoGenerateGraphPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenerateGraphEndpointApiRepoGenerateGraphPostResponses, GenerateGraphEndpointApiRepoGenerateGraphPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/repo/generate-graph',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Generates the file structure and content of a code repository with smart caching.
 * Generates the complete file structure and content of a code repository or ZIP file.
 */
export const generateStructureEndpointApiRepoGenerateStructurePost = <ThrowOnError extends boolean = false>(options?: Options<GenerateStructureEndpointApiRepoGenerateStructurePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenerateStructureEndpointApiRepoGenerateStructurePostResponses, GenerateStructureEndpointApiRepoGenerateStructurePostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/repo/generate-structure',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Authenticate via GitHub access token
 * Accepts a GitHub access token, fetches user profile from GitHub, creates a new user if not existing, and returns a JWT access token.
 */
export const loginUserApiBackendAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginUserApiBackendAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginUserApiBackendAuthLoginPostResponses, LoginUserApiBackendAuthLoginPostErrors, ThrowOnError>({
        url: '/api/backend-auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Process chat message
 * Process a user's chat message and return an AI-generated response
 */
export const processChatMessageApiBackendChatChatPost = <ThrowOnError extends boolean = false>(options: Options<ProcessChatMessageApiBackendChatChatPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProcessChatMessageApiBackendChatChatPostResponses, ProcessChatMessageApiBackendChatChatPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/backend-chat/chat',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Stream chat response
 * Process a chat message with streaming token-by-token response
 */
export const streamChatResponseApiBackendChatChatStreamPost = <ThrowOnError extends boolean = false>(options: Options<StreamChatResponseApiBackendChatChatStreamPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StreamChatResponseApiBackendChatChatStreamPostResponses, StreamChatResponseApiBackendChatChatStreamPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/backend-chat/chat/stream',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Get conversation history
 * Retrieve the full message history of a conversation
 */
export const getConversationHistoryApiBackendChatConversationsConversationIdPost = <ThrowOnError extends boolean = false>(options: Options<GetConversationHistoryApiBackendChatConversationsConversationIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetConversationHistoryApiBackendChatConversationsConversationIdPostResponses, GetConversationHistoryApiBackendChatConversationsConversationIdPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseTransformer: getConversationHistoryApiBackendChatConversationsConversationIdPostResponseTransformer,
        url: '/api/backend-chat/conversations/{conversation_id}',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * List user's chat sessions
 * Retrieve all chat session IDs and titles for the authenticated user
 */
export const listUserChatSessionsApiBackendChatSessionsPost = <ThrowOnError extends boolean = false>(options: Options<ListUserChatSessionsApiBackendChatSessionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ListUserChatSessionsApiBackendChatSessionsPostResponses, ListUserChatSessionsApiBackendChatSessionsPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/backend-chat/sessions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Get chat session details
 * Retrieve details of a chat session including recent conversations
 */
export const getChatSessionApiBackendChatSessionsChatIdPost = <ThrowOnError extends boolean = false>(options: Options<GetChatSessionApiBackendChatSessionsChatIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetChatSessionApiBackendChatSessionsChatIdPostResponses, GetChatSessionApiBackendChatSessionsChatIdPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseTransformer: getChatSessionApiBackendChatSessionsChatIdPostResponseTransformer,
        url: '/api/backend-chat/sessions/{chat_id}',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Save user API key
 * Save or update an encrypted API key for a specific provider
 */
export const saveUserApiKeyApiBackendChatKeysSavePost = <ThrowOnError extends boolean = false>(options: Options<SaveUserApiKeyApiBackendChatKeysSavePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SaveUserApiKeyApiBackendChatKeysSavePostResponses, SaveUserApiKeyApiBackendChatKeysSavePostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseTransformer: saveUserApiKeyApiBackendChatKeysSavePostResponseTransformer,
        url: '/api/backend-chat/keys/save',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Get available LLM models
 * Retrieve list of available models per provider and user's API key status
 */
export const getAvailableModelsApiBackendChatModelsPost = <ThrowOnError extends boolean = false>(options: Options<GetAvailableModelsApiBackendChatModelsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetAvailableModelsApiBackendChatModelsPostResponses, GetAvailableModelsApiBackendChatModelsPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/backend-chat/models',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Update chat settings
 * Update settings for a chat session (title, default model, etc.)
 */
export const updateChatSettingsApiBackendChatSettingsPost = <ThrowOnError extends boolean = false>(options: Options<UpdateChatSettingsApiBackendChatSettingsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateChatSettingsApiBackendChatSettingsPostResponses, UpdateChatSettingsApiBackendChatSettingsPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/backend-chat/settings',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Search repository context
 * Search repository content for relevant context based on query
 */
export const searchContextApiBackendChatContextSearchPost = <ThrowOnError extends boolean = false>(options: Options<SearchContextApiBackendChatContextSearchPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchContextApiBackendChatContextSearchPostResponses, SearchContextApiBackendChatContextSearchPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/backend-chat/context/search',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Generate wiki documentation
 * Starts the process of generating wiki documentation for a given repository. The task runs in the background, and a task ID is returned to track its progress.
 */
export const generateWikiApiDocumentationGenerateWikiPost = <ThrowOnError extends boolean = false>(options: Options<GenerateWikiApiDocumentationGenerateWikiPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateWikiApiDocumentationGenerateWikiPostResponses, GenerateWikiApiDocumentationGenerateWikiPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/documentation/generate-wiki',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Get wiki generation status
 * Retrieves the current status of a wiki generation task using the provided task ID.
 */
export const getWikiStatusApiDocumentationWikiStatusPost = <ThrowOnError extends boolean = false>(options: Options<GetWikiStatusApiDocumentationWikiStatusPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetWikiStatusApiDocumentationWikiStatusPostResponses, GetWikiStatusApiDocumentationWikiStatusPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/documentation/wiki-status',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Check if wiki documentation is generated
 * Checks if wiki documentation has been generated for a specific repository.
 */
export const isWikiGeneratedApiDocumentationIsWikiGeneratedPost = <ThrowOnError extends boolean = false>(options: Options<IsWikiGeneratedApiDocumentationIsWikiGeneratedPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IsWikiGeneratedApiDocumentationIsWikiGeneratedPostResponses, IsWikiGeneratedApiDocumentationIsWikiGeneratedPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/documentation/is-wiki-generated',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * List repository documentation files
 * Lists all documentation files for a specific repository with parsed content.
 */
export const listRepositoryDocsApiDocumentationRepositoryDocsPost = <ThrowOnError extends boolean = false>(options: Options<ListRepositoryDocsApiDocumentationRepositoryDocsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ListRepositoryDocsApiDocumentationRepositoryDocsPostResponses, ListRepositoryDocsApiDocumentationRepositoryDocsPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/documentation/repository-docs',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};